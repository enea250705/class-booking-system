// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Comment out dbml generator as it's not used
// generator dbml {
//   provider = "prisma-dbml-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          String    @default("user")
  approved      Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  waitlist      Waitlist[]
  notifications Notification[]
  packages      Package[]
  packageRenewals PackageRenewal[]
}

model Class {
  id              String    @id @default(cuid())
  name            String
  day             String
  time            String
  date            DateTime
  description     String?
  enabled         Boolean   @default(true)
  capacity        Int       @default(5)
  currentBookings Int       @default(0)
  paymentMethod   String    @default("Cash")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  price           Float?    @default(0)
  bookings        Booking[]
  waitlist        Waitlist[]
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  status    String   @default("confirmed")
  notified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Waitlist {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  createdAt DateTime @default(now())
  position  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
}

model Package {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  name            String
  totalClasses    Int
  classesRemaining Int
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime @default(now())
  active          Boolean  @default(true)
  packageRenewals PackageRenewal[]
}

model PackageRenewal {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId   String
  packageType String   // "8" or "12" 
  packageName String   // e.g. "8 CrossFit Classes / Month"
  renewedAt   DateTime @default(now())
  startDate   DateTime
  endDate     DateTime
  price       Float?   @default(0)
  method      String   @default("renewal") // "renewal", "purchase", "admin_assigned"
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id        String   @id @default(cuid())
  name      String   @unique
  value     String   // JSON string containing the settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
